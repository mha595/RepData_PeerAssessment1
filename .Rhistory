u <- subset(DAT, DAT$SCC == "10100401")
plot(u$year, u$Emissions)
SOUR
names(SOUR)
dim(DAT)
length(unique(DAT$SCC))
SOUR$Data.Category
SOUR$SCC
u <- subset(DAT, DAT$fips == "24501")
dim(u)
u <- subset(DAT, DAT$fips == "24510")
dim(u)
plot(u$year, u$Emissions)
plot(u$year, u$Emissions, xlab = Year, ylab = Emission)
plot(u$year, u$Emissions, xlab = "Year", ylab = "Emission")
plot_1 <- function(){
st1 <- "/Users/muhammadhamidahmed/Desktop/Coursera/Explotory data analysis/pm25_data/summarySCC_PM25.rds"
st2 <- "/Users/muhammadhamidahmed/Desktop/Coursera/Explotory data analysis/pm25_data/Source_Classification_Code.rds"
if (!exists("DAT")){
DAT <<- readRDS(st1)
SOUR <<- readRDS(st2)
}
DAT$year <-  as.Date(as.character(DAT$year), "%Y")
u <- subset(DAT, DAT$fips == "24510")
plot(u$year, u$Emissions, xlab = "Year", ylab = "Emission")
}
plot_2()
plot_2 <- function(){
st1 <- "/Users/muhammadhamidahmed/Desktop/Coursera/Explotory data analysis/pm25_data/summarySCC_PM25.rds"
st2 <- "/Users/muhammadhamidahmed/Desktop/Coursera/Explotory data analysis/pm25_data/Source_Classification_Code.rds"
if (!exists("DAT")){
DAT <<- readRDS(st1)
SOUR <<- readRDS(st2)
}
DAT$year <-  as.Date(as.character(DAT$year), "%Y")
u <- subset(DAT, DAT$fips == "24510")
plot(u$year, u$Emissions, xlab = "Year", ylab = "Emission")
}
plot_2()
plot_1 <- function(){
st1 <- "/Users/muhammadhamidahmed/Desktop/Coursera/Explotory data analysis/pm25_data/summarySCC_PM25.rds"
st2 <- "/Users/muhammadhamidahmed/Desktop/Coursera/Explotory data analysis/pm25_data/Source_Classification_Code.rds"
if (!exists("DAT")){
DAT <<- readRDS(st1)
SOUR <<- readRDS(st2)
}
DAT$year <-  as.Date(as.character(DAT$year), "%Y")
}
plot_1()
plot_2()
plot_2 <- function(){
st1 <- "/Users/muhammadhamidahmed/Desktop/Coursera/Explotory data analysis/pm25_data/summarySCC_PM25.rds"
st2 <- "/Users/muhammadhamidahmed/Desktop/Coursera/Explotory data analysis/pm25_data/Source_Classification_Code.rds"
if (!exists("DAT")){
DAT <<- readRDS(st1)
SOUR <<- readRDS(st2)
DAT$year <-  as.Date(as.character(DAT$year), "%Y")
}
u <- subset(DAT, DAT$fips == "24510")
plot(u$year, u$Emissions, xlab = "Year", ylab = "Emission")
}
plot_2()
u <- subset(DAT, DAT$fips == "24510" & DAT$type == "point")
plot(u$year, u$Emissions, xlab = "Year", ylab = "Emission")
plot(u$year, u$Emissions, xlab = "Year", ylab = "Emission")
u
u <- subset(DAT, DAT$fips == "24510" & DAT$type == "Point")
u
u <- subset(DAT, DAT$fips == "24510" )
u
head(u)
u <- subset(DAT, DAT$fips == "24510" & DAT$type == "POINT")
u
plot(u$year, u$Emissions, xlab = "Year", ylab = "Emission")
library(ggplot)
library(ggplot2)
u <- subset(DAT, DAT$fips == "24510" & DAT$type == "POINT", c(1,2))
u
names(u)
ggplot(u,es(x = fips, y = SCC))
ggplot(u,aes(x = fips, y = SCC))
head(u)
u <- subset(DAT, DAT$fips == "24510")
ggplot(u,aes(x = year, y = Emission))
ggplot(u,aes(x = year, y = Emissions))
u <- subset(DAT, DAT$fips == "24510")
ggplot(u,aes(x = year, y = Emissions)) + geom_point()
u <- subset(DAT, DAT$fips == "24510")
u <- subset(DAT, DAT$fips == "24510" & DAT$type == "POINT")
ggplot(u,aes(x = year, y = Emissions)) + geom_point()
unique(u$type)
unique(DAT$type)
u <- subset(DAT, DAT$fips == "24510" & DAT$type == "NONPOINT")
ggplot(u,aes(x = year, y = Emissions)) + geom_point()
ggplot(u,aes(x = year, y = Emissions)) + geom_point(aes(col=state))
ggplot(u,aes(x = year, y = Emissions)) + geom_point(aes(col=blue))
ggplot(u,aes(x = year, y = Emissions)) + geom_point(aes(col='blue'))
ggplot(u,aes(x = year, y = Emissions)) + geom_point(aes(col='state'))
ggplot(u,aes(x = year, y = Emissions)) + geom_point(aes(col='firebrick'))
ggplot(u,aes(x = year, y = Emissions)) + geom_point(aes(col='blue'))
ggplot(u,aes(x = year, y = Emissions)) + geom_point(aes(col="blue"))
ggplot(u,aes(x = year, y = Emissions)) + geom_point(aes(col="blue", size = 2))
library(twitteR)
library(RCurl)
consumerKey <-  'NR3OtwdjbFU8erj1Dw4DyrgT6'
consumerSecret <- '0vc6Y7wA6osPWJ0Wu7jEyDsw2Osj3u3anXFU2GBwXs6DWiY1VL'
accessToken <- '442683080-JJ7cBTaIvfPTijri8tsQFz4AgBbfyhYEE2jgfWvw'
accessSecrat <-  'aOLrjB8xtwVvlLUhZlVVz3oZeAq0hU6dUZ2vtFnzhC8xy'
setup_twitter_oauth(consumerKey, consumerSecret,accessToken, accessSecrat)
library(twitteR)
library(RCurl)
consumerKey <-  'NR3OtwdjbFU8erj1Dw4DyrgT6'
consumerSecret <- '0vc6Y7wA6osPWJ0Wu7jEyDsw2Osj3u3anXFU2GBwXs6DWiY1VL'
accessToken <- '442683080-JJ7cBTaIvfPTijri8tsQFz4AgBbfyhYEE2jgfWvw'
accessSecrat <-  'aOLrjB8xtwVvlLUhZlVVz3oZeAq0hU6dUZ2vtFnzhC8xy'
setup_twitter_oauth(consumerKey, consumerSecret,accessToken, accessSecrat)
consumerKey
consumerKey <-  "NR3OtwdjbFU8erj1Dw4DyrgT6"
consumerSecret <- "0vc6Y7wA6osPWJ0Wu7jEyDsw2Osj3u3anXFU2GBwXs6DWiY1VL"
accessToken <- "442683080-JJ7cBTaIvfPTijri8tsQFz4AgBbfyhYEE2jgfWvw"
accessSecrat <-  "aOLrjB8xtwVvlLUhZlVVz3oZeAq0hU6dUZ2vtFnzhC8xy"
library(twitteR)
library(RCurl)
setup_twitter_oauth(consumerKey, consumerSecret,accessToken, accessSecrat)
consumerKey <-  "NR3OtwdjbFU8erj1Dw4DyrgT6"
consumerSecret <- "0vc6Y7wA6osPWJ0Wu7jEyDsw2Osj3u3anXFU2GBwXs6DWiY1VL"
accessToken <- "442683080-JJ7cBTaIvfPTijri8tsQFz4AgBbfyhYEE2jgfWvw"
accessSecrat <-  "aOLrjB8xtwVvlLUhZlVVz3oZeAq0hU6dUZ2vtFnzhC8xy"
setup_twitter_oauth(consumerKey, consumerSecret,accessToken, accessSecrat)
library(twitteR)
library(RCurl)
library(ROAuth)
setup_twitter_oauth(consumerKey, consumerSecret,accessToken, accessSecrat)
install.packages("base64enc")
setup_twitter_oauth(consumerKey, consumerSecret,accessToken, accessSecrat)
consumerKey <-  "NR3OtwdjbFU8erj1Dw4DyrgT6"
consumerSecret <- "0vc6Y7wA6osPWJ0Wu7jEyDsw2Osj3u3anXFU2GBwXs6DWiY1VL"
accessToken <- "442683080-JJ7cBTaIvfPTijri8tsQFz4AgBbfyhYEE2jgfWvw"
accessSecrat <-  "aOLrjB8xtwVvlLUhZlVVz3oZeAq0hU6dUZ2vtFnzhC8xy"
# twitter analysis..
#setwd("~/Desktop/Pak politics sentiment analysis/")
library(twitteR)
library(RCurl)
# library(ROAuth)
# library(plyr)
# library(dplyr)
# library(stringr)
# library(ggplot2)
# library(httr)
# library(wordcloud)
# library(RSentiment)
setup_twitter_oauth(consumerKey, consumerSecret,accessToken, accessSecrat)
devtools::install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
install.packages("devtools")
library(devtools)
install_github("jrowen/twitteR", ref = "oauth_httr_1_0")
consumerKey <-  "NR3OtwdjbFU8erj1Dw4DyrgT6"
consumerSecret <- "0vc6Y7wA6osPWJ0Wu7jEyDsw2Osj3u3anXFU2GBwXs6DWiY1VL"
accessToken <- "442683080-JJ7cBTaIvfPTijri8tsQFz4AgBbfyhYEE2jgfWvw"
accessSecrat <-  "aOLrjB8xtwVvlLUhZlVVz3oZeAq0hU6dUZ2vtFnzhC8xy"
# twitter analysis..
#setwd("~/Desktop/Pak politics sentiment analysis/")
library(twitteR)
library(RCurl)
library(ROAuth)
library(plyr)
library(dplyr)
library(stringr)
library(ggplot2)
library(httr)
library(wordcloud)
library(RSentiment)
setup_twitter_oauth(consumerKey, consumerSecret,accessToken, accessSecrat)
setup_twitter_oauth(consumerKey, consumerSecret,accessToken, accessSecrat)
consumerKey <-  "NR3OtwdjbFU8erj1Dw4DyrgT6"
consumerSecret <- "0vc6Y7wA6osPWJ0Wu7jEyDsw2Osj3u3anXFU2GBwXs6DWiY1VL"
accessToken <- "442683080-JJ7cBTaIvfPTijri8tsQFz4AgBbfyhYEE2jgfWvw"
accessSecrat <-  "aOLrjB8xtwVvlLUhZlVVz3oZeAq0hU6dUZ2vtFnzhC8xy"
# twitter analysis..
#setwd("~/Desktop/Pak politics sentiment analysis/")
library(twitteR)
library(RCurl)
# library(ROAuth)
# library(plyr)
# library(dplyr)
# library(stringr)
# library(ggplot2)
# library(httr)
# library(wordcloud)
# library(RSentiment)
setup_twitter_oauth(consumerKey, consumerSecret,accessToken, accessSecrat)
setwd("/Users/muhammadhamidahmed/Desktop/Coursera/Getting and cleaning data/W-4")
subject_train <- read.table("train/subject_train.txt")
X_train       <- read.table("train/X_train.txt")
Y_train <-   read.table("train/y_train.txt")
# reading test data..
subject_test <- read.table("test/subject_test.txt")
X_test       <- read.table("test/X_test.txt")
Y_test <-   read.table("test/y_test.txt")
#
# Task-1
# #combining
#
subject_comb <- rbind(subject_train,subject_test)     # subject id
X_comb       <- rbind(X_train,X_test)                 # measurements
Y_comb <-   rbind(Y_train,Y_test)                     # activity type
activity_names <- read.table("features.txt")
meanstd_data <- X_comb[,grep("mean|std", activity_names$V2)]
meanandstd_activities <-  activity_names[grep("mean|std", activity_names$V2),2]
names(meanstd_data) <-  meanandstd_activities
f_data <- data.frame(id = as.vector(subject_comb)[[1]], activity = as.vector(Y_comb)[[1]] )
f_data <- cbind(f_data, meanstd_data)
# changing the activity names to descriptive
# Task -3
aid <- read.table("activity_labels.txt")
names(aid) <- c("activity", "name")
f_data$activity <- aid[match(f_data[['activity']], aid[['activity']] ), 'name']
# sorting by id
f_data <- f_data[order(f_data$id),]
# averging measurments by activities by subject
split_data <- split(f_data, f_data$activity)
split_mean <- lapply(split_data, function(x) aggregate(x[,3:81],by=list(x$id), mean))
# adding the activity column to each data frame
b <- summary( split_data)
nms <- names(b[,1])
for (a in 1:6){
split_mean[[a]]$activity <- nms[a]
}
f_means <- do.call("rbind", split_mean)    # final data
setwd("/Users/muhammadhamidahmed/Desktop/Coursera/Getting and cleaning data/temp")
write.table(f_means, file = "/Users/muhammadhamidahmed/Desktop/Coursera/Getting and cleaning data/temp/final_data.txt", row.names = FALSE)
rm()
setwd("/Users/muhammadhamidahmed/Desktop/Coursera/Reproduceable research/activity_monitor")
dat <- read.csv("activity.csv")
names(dat)
summary(dat)
class(dat$date)
as.Date(dat$date, "%Y-%m-%d")
class(dat$steps)
class(dat$interval)
namees(dat)
names(dat)
aggregate(dat$steps, dat$date, mean)
aggregate(dat$steps, list[(at$date), mean)
aggregate(dat$steps, list[(dat$date), mean)
aggregate(dat[,1], list[(dat$date), mean)
aggregate(dat$steps, list(dat$date), mean)
aggregate(dat$steps, list(dat$date), mean, na.action = na.omit)
aggregate(.~steps, dat, FUN=mean, na.rm=TRUE, na.action=NULL)
aggregate(dat$steps, dat$date, FUN=mean, na.rm=TRUE, na.action=NULL)
aggregate(.~steps, dat, FUN=mean, na.rm=TRUE, na.action=NULL)
aggregate(.~steps, dat$date, FUN=mean, na.rm=TRUE, na.action=NULL)
aggregate(dat$steps, dat$date, FUN=mean, na.rm=TRUE, na.action=NULL)
aggregate(dat$steps, list(dat$date), FUN=mean, na.rm=TRUE, na.action=NULL)
aggregate(dat$steps, list(dat$date), FUN=mean, na.rm=TRUE)
aggregate(dat$steps, by = list(dat$date), FUN=mean, na.rm=TRUE)
dat[dat$date == 2012-11-30]
dat[dat$date == 2012-11-30,]
dat[dat$date == "2012-11-30" ,]
aggregate(dat$steps, by = list(dat$date), FUN=mean, na.rm=TRUE)
mean_steps_by_date <- aggregate(dat$steps, by = list(dat$date), FUN=mean, na.rm=TRUE)
names(mean_steps_by_date) <- c("Date", "Mean steps")
hist(mean_steps_by_date$`Mean steps`)
hist(mean_steps_by_date)
hist(mean_steps_by_date$`Mean steps`)
plot(dat$steps, dat$date)
plot(dat$date, dat$steps, type= "l")
dat$interval
dim(dast)
dim(dat)
dat$interval
dat$date
dat[dat$date == "2012-10-04" ,]
dat[dat$interval == 2340 ,]
mean_steps_by_date <- aggregate(dat$steps, by = list(dat$date), FUN=sum, na.rm=TRUE)
names(mean_steps_by_date) <- c("Date", "Mean steps")
names(mean_steps_by_date) <- c("Date", "Total steps")
mean_steps_by_date
hist(mean_steps_by_date$`Total steps`)
mean(mean_steps_by_date$`Total steps`, na.rm = TRUE)
mode(mean_steps_by_date$`Total steps`, na.rm = TRUE)
median(mean_steps_by_date$`Total steps`, na.rm = TRUE)
average_steps_by_interval <- aggregate(dat$steps, by = list(dat$interval), FUN=sum, na.rm=TRUE)
average_steps_by_interval
names(average_steps_by_interval) <- c("Intereval", "Average steps")
plot(average_steps_by_interval$Intereval,average_steps_by_interval$`Average steps`, type = "l")
plot(average_steps_by_interval$Intereval,average_steps_by_interval$`Average steps`, type = "l", xlab = "Interval", ylab = "Average steps")
print(step_median)
step_median <- median(total_steps_by_date$`Total steps`, na.rm = TRUE)
dat <- read.csv("activity.csv")
dat$date <- as.Date(dat$date, "%Y-%m-%d")
total_steps_by_date <- aggregate(dat$steps, by = list(dat$date), FUN=sum, na.rm=TRUE)
names(total_steps_by_date) <- c("Date", "Total steps")
hist(total_steps_by_date$`Total steps`)
step_mean <- mean(total_steps_by_date$`Total steps`, na.rm = TRUE)
step_median <- median(total_steps_by_date$`Total steps`, na.rm = TRUE)
average_steps_by_interval <- aggregate(dat$steps, by = list(dat$interval), FUN=sum, na.rm=TRUE)
names(average_steps_by_interval) <- c("Intereval", "Average steps")
plot(average_steps_by_interval$Intereval,average_steps_by_interval$`Average steps`, type = "l", xlab = "Interval", ylab = "Average steps")
average_steps_by_interval
length(is.na(dat))
is.na(dat)
dim(is.na(dat))
length(is.na(dat))
dim(is.na(dat$steps))
length(is.na(dat$steps))
length(is.na(dat$steps) == TRUE)
length(dat[is.na(dat$steps),])
dat[is.na(dat$steps),]
dim(dat[is.na(dat$steps),])
dim(dat[is.na(dat$steps),1])
length(dat[is.na(dat$steps),1])
dat[is.na(dat$steps),]$date
unique(dat[is.na(dat$steps),]$date)
length(dat[is.na(dat$steps),1])
2304/6
length(unique(dat$date))
dim(dat)
17568/61
dat[dat$date == "2012-10-08" ,]
dat[dat$date == "2012-10-01" ,]
is.na(dat)
dat[is.na(dat)]
hist(total_steps_by_date$`Total steps`, xlab = Steps, title("Steps taken in a day"))
step_median
max(average_steps_by_interval$`Average steps`)
which (average_steps_by_interval$`Average steps` == max(average_steps_by_interval$`Average steps`))
which (average_steps_by_interval$Average steps == max(average_steps_by_interval$Average steps))
which(average_steps_by_interval$Average steps == max(average_steps_by_interval$Average steps))
which(average_steps_by_interval$'Average steps' == max(average_steps_by_interval$'Average steps'))
dat[is.na(dat$steps),]
dat[is.na(dat$steps),3]
na_intervals <- dat[is.na(dat$steps),3]
average_steps_by_interval[['steps']]
average_steps_by_interval$Intereval
dat[is.na(dat$steps),2:3]
dat[is.na(dat$steps),c(1,3)]
na_intervals
names(dat)
dat[is.na(dat$steps),c(1,3)]
dat[is.na(dat$steps),2:3]
average_steps_by_interval
na_intervals
average_steps_by_interval[match(average_steps_by_interval$Intereval, na_intervals ), 'name']
match(average_steps_by_interval$Intereval, na_intervals )
match(average_steps_by_interval$Intereval, na_intervals)
match(na_intervals,average_steps_by_interval$Intereval)
num_of_missing_val <- length(dat[is.na(dat$steps),1])
num_of_missing_val
average_steps_by_interval[match(na_intervals,average_steps_by_interval$Intereval), 'Average steps']
names(dat)
dat[is.na(dat)] <- average_steps_by_interval[match(na_intervals,average_steps_by_interval$Intereval), 'Average steps']
is.na(dat)
length(dat[is.na(dat$steps),1])
total_steps_by_date
dat_no_na <- dat
na_intervals <- dat[is.na(dat$steps),3]
dat_no_na[is.na(dat_no_na)] <- average_steps_by_interval[match(na_intervals,average_steps_by_interval$Intereval), 'Average steps']
#
total_steps_no_na <- aggregate(dat_no_na$steps, by = list(dat_no_na$date), FUN=sum)
hist(total_steps_no_na$'Total steps', xlab = "Steps", main = "Steps taken in a day", breaks = 10)
total_steps_no_na
names(total_steps_no_na) <- c("Date", "Steps")
hist(total_steps_no_na$Steps, xlab = "Steps", main = "Steps taken in a day", breaks = 10)
hist(total_steps_no_na$Steps, xlab = "Steps", main = "Steps taken in a day")
total_steps_no_na$Steps
histtotal_steps_no_na$Steps
hist(total_steps_no_na$Steps)
hist(total_steps_no_na$Steps, breaks = 20)
hist(total_steps_no_na$Steps, breaks = 30)
hist(total_steps_no_na$Steps, breaks = 50)
total_steps_no_na
total_steps_by_date
total_steps_no_na
hist(total_steps_no_na$Steps[c(1:60)], breaks = 50)
hist(total_steps_no_na$Steps[c(2:60)], breaks = 50)
plot(total_steps_by_date$Date, total_steps_no_na$Steps)
setwd("/Users/muhammadhamidahmed/Desktop/Coursera/Reproduceable research/RepData_PeerAssessment1
")
setwd("/Users/muhammadhamidahmed/Desktop/Coursera/Reproduceable research/RepData_PeerAssessment1")
dat <- read.csv("activity.csv")
dat$date <- as.Date(dat$date, "%Y-%m-%d")
total_steps_by_date <- aggregate(dat$steps, by = list(dat$date), FUN=sum, na.rm=TRUE)
average_steps_by_interval <- aggregate(dat$steps, by = list(dat$interval), FUN=sum, na.rm=TRUE)
dim(average_steps_by_interval)
plot(c(1:288), average_steps_by_interval$x)
average_steps_by_interval <- aggregate(dat$steps, by = list(dat$interval), FUN=mean, na.rm=TRUE)
plot(c(1:288), average_steps_by_interval$x)
average_steps_by_interval <- aggregate(dat$steps, by = list(dat$interval), FUN=mean, na.rm=TRUE)
names(average_steps_by_interval) <- c("Intereval", "Average steps")
plot(average_steps_by_interval$Intereval,average_steps_by_interval$`Average steps`, type = "l", xlab = "Interval", ylab = "Average steps")
library(ggplot2)
df_1 <- total_steps_by_date
dat_no_na <- dat
na_intervals <- dat[is.na(dat$steps),3]
dat_no_na[is.na(dat_no_na)] <- average_steps_by_interval[match(na_intervals,average_steps_by_interval$Intereval), 'Average steps']
#
total_steps_no_na <- aggregate(dat_no_na$steps, by = list(dat_no_na$date), FUN=sum)
df_2 <- total_steps_no_na
df_1$isna <- nA
df_1$isna <- "nA"
df_2$isna <- "no_nA"
df <- rbind(df_1, df_2)
names(df)
ggplot(df, aes(x=x, color=isna)) +geom_histogram(fill="white", position="dodge")+theme(legend.position="top")
ggplot(df, aes(x=x, color=isna)) +geom_histogram(fill="white", position="dodge")+theme(legend.position="top")
weekday(dat$date)
weekdays(dat$date)
weekdays(1)
weekdays(as.Date(1)
)
as.Date(40182, origin="1899-12-30")
as.Date(c(1:7), origin="1899-12-30")
weekdays(as.Date(c(1:7), origin="1899-12-30"))
weekdays(as.Date(c(1:7), origin="1899-12-31"))
wd_df <- data.frame(Day = weekdays(as.Date(c(1:7), origin="1899-12-31")), Isweekday = "True")
wd_df
wd_df[6:7,2] <- "FALSE"
wd_df[6:7,2]
wd_df
wd_df <- data.frame(Day = weekdays(as.Date(c(1:7), origin="1899-12-31")), Isweekday = "TRUE")
wd_df
wd_df$Day
wd_df <- data.frame(Day = weekdays(as.Date(c(1:7), origin="1899-12-31")), Isweekday = "T")
wd_df[6:7,2] <- "F"
cc <- factors(c("weekdays", "weekdays","weekdays","weekdays","weekdays","weeends", "weekends"))
cc <- factor(c("weekdays", "weekdays","weekdays","weekdays","weekdays","weeends", "weekends"))
cc
cc <- factor(c("weekdays", "weekdays","weekdays","weekdays","weekdays","weeeknds", "weekends"))
cc
cc <- factor(c("weekdays", "weekdays","weekdays","weekdays","weekdays","weeekends", "weekends"))
cc
cc <- factor(c("weekdays", "weekdays","weekdays","weekdays","weekdays","weekends", "weekends"))
cc
cc[1]
cc[2]
cc[7]
wd_df
wd_df$Isweekday <- cc
wd_df
match(weekday(dat$date), wd_df$Day)
match(weekdays(dat$date), wd_df$Day)
wd_df[match(weekdays(dat$date), wd_df$Day),2]
cc <- factor(c("weekday", "weekday","weekday","weekday","weekday","weekend", "weekend"))
wd_df <- data.frame(Day = weekdays(as.Date(c(1:7), origin="1899-12-31")))
cc <- factor(c("weekday", "weekday","weekday","weekday","weekday","weekend", "weekend"))
wd_df$Isweekday <- cc
wd_df
wd_df[match(weekdays(dat$date), wd_df$Day),2]
dat$day <-  wd_df[match(weekdays(dat$date), wd_df$Day),2]
dat_no_na$day <-  wd_df[match(weekdays(dat$date), wd_df$Day),2]
split_dat_no_na <- split(dat_no_na, dat_no_na$day)
summary(split_dat_no_na)
summary(split_dat_no_na$weekday)
split_dat_no_na[[1]]
mean_by_interval_weekday <- aggregate(split_dat_no_na$weekday$steps, by=list(split_dat_no_na$weekday$interval), FUN = mean])
mean_by_interval_weekday <- aggregate(split_dat_no_na$weekday$steps, by=list(split_dat_no_na$weekday$interval), FUN = mean])
mean_by_interval_weekday <- aggregate(split_dat_no_na$weekday$steps, by=list(split_dat_no_na$weekday$interval), FUN = mean)
mean_by_interval_weekday
mean_by_interval_weekend <- aggregate(split_dat_no_na$weekend$steps, by=list(split_dat_no_na$weekend$interval), FUN = mean)
library(lattice)
names(dat6)
names(dat)
mean_by_interval_weekday <- aggregate(split_dat_no_na$weekday, by=list(split_dat_no_na$weekday$interval), FUN = mean)
split_dat_no_na <- split(dat_no_na, dat_no_na$day)
names(dat_no_na[[1]])
names(split_dat_no_na[[1]])
unique(names(split_dat_no_na[[1]])$day)
cc[1]
names(mean_by_interval_weekday)
unique(mean_by_interval_weekday$day)
mean_by_interval_weekday$day
mean_by_interval_weekday <- aggregate(split_dat_no_na$weekday$steps, by=list(split_dat_no_na$weekday$interval), FUN = mean)
names(mean_by_interval_weekday)
names(mean_by_interval_weekday) <- c("Intervels", "Mean_steps")
mean_by_interval_weekday$day <- cc[1]
names(mean_by_interval_weekend) <- c("Intervels", "Mean_steps")
mean_by_interval_weekend$day <- cc[2]
mean_by_interval_comb <- rcomb(mean_by_interval_weekday,mean_by_interval_weekend)
mean_by_interval_comb <- rbind(mean_by_interval_weekday,mean_by_interval_weekend)
ggplot(mean_by_interval_comb, aes(Intervals, Mean_steps)) + geom_point() + facet_grid(. ~ day)
names(mean_by_interval_comb)
ggplot(mean_by_interval_comb, aes(Intervels, Mean_steps)) + geom_point() + facet_grid(. ~ day)
mean_by_interval_weekend$day
c[2]
cc[2]
cc[1]
cc[3]
cc[7]
summary(cc)
cc
mean_by_interval_weekend$day <- cc[7]
mean_by_interval_comb <- rbind(mean_by_interval_weekday,mean_by_interval_weekend)
ggplot(mean_by_interval_comb, aes(Intervels, Mean_steps)) + geom_point() + facet_grid(. ~ day)
ggplot(mean_by_interval_comb, aes(Intervels, Mean_steps)) + geom_point() + color(. ~ day)
ggplot(mean_by_interval_comb, aes(Intervels, Mean_steps, color = day)) + geom_point()
24*60/5
24*60*60/5
ggplot(mean_by_interval_comb, aes(Intervels, Mean_steps)) + geom_point() + facet_grid(. ~ day)
ggplot(mean_by_interval_comb, aes(Intervels, Mean_steps)) + geom_line() + facet_grid(. ~ day)
ggplot(mean_by_interval_comb, aes(Intervels, Mean_steps)) + geom_line() + facet_grid(day.~)
ggplot(mean_by_interval_comb, aes(Intervels, Mean_steps)) + geom_line() + facet_grid(day . ~)
ggplot(mean_by_interval_comb, aes(Intervels, Mean_steps)) + geom_line() + facet_grid(day ~ .)
df_1 <- total_steps_by_date
df_2 <- total_steps_no_na
df_1$isna <- nA
total_steps_by_date
df_1 <- total_steps_by_date
df_2 <- total_steps_no_na
df_1$isna <- "nA"
df_2$isna <- "no_nA"
ggplot(df, aes(x=x, color=isna)) +geom_histogram(fill="white", position="dodge")+theme(legend.position="top")
